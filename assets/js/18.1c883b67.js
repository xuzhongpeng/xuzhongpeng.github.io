(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{296:function(s,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"时间复杂度和空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度","aria-hidden":"true"}},[s._v("#")]),s._v(" 时间复杂度和空间复杂度")]),s._v(" "),a("h2",{attrs:{id:"一、算法效率的度量方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、算法效率的度量方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、算法效率的度量方法")]),s._v(" "),a("h3",{attrs:{id:"_1-事后统计方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-事后统计方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 事后统计方法")]),s._v(" "),a("p",[s._v("这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。")]),s._v(" "),a("h3",{attrs:{id:"_2-事前分析估算方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事前分析估算方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 事前分析估算方法")]),s._v(" "),a("p",[s._v("在计算机程序编写前，依据统计方法对算法进行估算。")]),s._v(" "),a("p",[s._v("经过总结，我们发现一个高级语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：")]),s._v(" "),a("ol",[a("li",[s._v("算法采用的策略，方案")]),s._v(" "),a("li",[s._v("编译产生的代码质量")]),s._v(" "),a("li",[s._v("问题的输入规模")]),s._v(" "),a("li",[s._v("机器执行指令的速度")])]),s._v(" "),a("h2",{attrs:{id:"二、算法时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、算法时间复杂度","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、算法时间复杂度")]),s._v(" "),a("h3",{attrs:{id:"_1-算法时间复杂度定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法时间复杂度定义","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 算法时间复杂度定义")]),s._v(" "),a("p",[s._v("在进行算法分析时，语句总的执行次数 T(n)是关于问题规模 n 的函数，进而分析 T(n)随 n 的变化情况并确定 T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)= O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n)是问题规模 n 的某个函数。")]),s._v(" "),a("p",[s._v("用大写 O()来体现算法时间复杂度的记法，我们称之为大 O 记法。")]),s._v(" "),a("p",[s._v("一般情况下，随着输入规模 n 的增大，T(n)增长最慢的算法为最优算法。\n显然，由此算法时间复杂度的定义可知，我们的三个求和算法的时间复杂度分别为 O(1)，O(n)，O(n^2)。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://vnode-1253495453.cos.ap-nanjing.myqcloud.com/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.webp",alt:"算法时间复杂度"}})]),s._v(" "),a("h3",{attrs:{id:"_2-推导大-o-阶方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-推导大-o-阶方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.推导大 O 阶方法")]),s._v(" "),a("p",[s._v("如何分析一个算法的时间复杂度呢？即如何推导大 O 阶呢？")]),s._v(" "),a("p",[s._v("用常数 1 取代运行时间中的所有加法常数。\n在修改后的运行次数函数中，只保留最高阶项。\n如果最高阶项存在且不是 1，则去除与这个项相乘的常数。\n得到的最后结果就是大 O 阶。")]),s._v(" "),a("h4",{attrs:{id:"①-常数阶-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#①-常数阶-o-1","aria-hidden":"true"}},[s._v("#")]),s._v(" ① 常数阶 O(1)")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"②-线性阶-o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#②-线性阶-o-n","aria-hidden":"true"}},[s._v("#")]),s._v(" ② 线性阶 O(n)")]),s._v(" "),a("p",[s._v("一般含有非嵌套循环涉及线性阶，线性阶就是随着问题规模 n 的扩大，对应计算次数呈直线增长。")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"平方阶-o-n²"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平方阶-o-n²","aria-hidden":"true"}},[s._v("#")]),s._v(" 平方阶 O(n²)")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“I love FishC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("n 等于 100，也就是说外层循环每执行一次，内层循环就执行 100 次，那总共程序想要从这两个循环出来，需要执行 100*100 次，也就是 n 的平方。所以这段代码的时间复杂度为 O(n^2)。")]),s._v(" "),a("blockquote",[a("p",[s._v("总结：如果有三个这样的嵌套循环就是 n^3。所以总结得出，循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。")])]),s._v(" "),a("h3",{attrs:{id:"④-对数阶-o-logn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#④-对数阶-o-logn","aria-hidden":"true"}},[s._v("#")]),s._v(" ④ 对数阶 O(logN)")]),s._v(" "),a("p",[s._v("还是先来看代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int i = 1;\nwhile(i<n)\n{\n    i = i * 2;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从上面代码可以看到，在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环 x 次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n\n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(logN)")]),s._v(" "),a("h3",{attrs:{id:"线性对数阶-o-nlogn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶-o-nlogn","aria-hidden":"true"}},[s._v("#")]),s._v(" 线性对数阶 O(nlogN)")]),s._v(" "),a("p",[s._v("线性对数阶 O(nlogN) 其实非常容易理解，将时间复杂度为 O(logn)的代码循环 N 遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了 O(nlogN)。")]),s._v(" "),a("p",[s._v("就拿上面的代码加一点修改来举例：")]),s._v(" "),a("p",[s._v("for(m=1; m<n; m++)\n{\ni = 1;\nwhile(i<n)\n{\ni = i * 2;\n}\n}")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://vnode-1253495453.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.webp",alt:"常见的时间复杂度"}})]),s._v(" "),a("p",[s._v("对应的线性图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://vnode-1253495453.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%BA%BF%E6%80%A7%E5%9B%BE.webp",alt:"常见的时间复杂度线性图"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://vnode-1253495453.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%BA%BF%E6%80%A7%E5%9B%BE%E6%95%B0%E9%87%8F%E5%A4%A7%E7%9A%84%E6%83%85%E5%86%B5.webp",alt:"常见的时间复杂度线性图数量大的情况"}})]),s._v(" "),a("p",[s._v("常用的时间复杂度所耗费的时间从小到大依次是：\nO(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)")]),s._v(" "),a("h2",{attrs:{id:"三、最坏情况与平均情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、最坏情况与平均情况","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、最坏情况与平均情况")]),s._v(" "),a("p",[s._v("我们查找一个有 n 个随机数字数组中的某个数字，最好的情况是第一个数字就是，那么算法的时间复杂度为 O(1)，但也有可能这个数字就在最后一个位置，那么时间复杂度为 O(n)。")]),s._v(" "),a("p",[s._v("平均运行时间是期望的运行时间。")]),s._v(" "),a("p",[s._v("最坏运行时间是一种保证。在应用中，这是一种最重要的需求，通常除非特别指定，我们提到的运行时间都是最坏情况的运行时间。")]),s._v(" "),a("h2",{attrs:{id:"四、算法的空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、算法的空间复杂度","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、算法的空间复杂度")]),s._v(" "),a("p",[s._v("我们在写代码时，完全可以用空间来换去时间。")]),s._v(" "),a("p",[s._v("举个例子说，要判断某年是不是闰年，你可能会花一点心思来写一个算法，每给一个年份，就可以通过这个算法计算得到是否闰年的结果。")]),s._v(" "),a("p",[s._v("另外一种方法是，事先建立一个有 2050 个元素的数组，然后把所有的年份按下标的数字对应，如果是闰年，则此数组元素的值是 1，如果不是元素的值则为 0。这样，所谓的判断某一年是否为闰年就变成了查找这个数组某一个元素的值的问题。")]),s._v(" "),a("p",[s._v("第一种方法相比起第二种来说很明显非常节省空间，但每一次查询都需要经过一系列的计算才能知道是否为闰年。第二种方法虽然需要在内存里存储 2050 个元素的数组，但是每次查询只需要一次索引判断即可。")]),s._v(" "),a("p",[s._v("这就是通过一笔空间上的开销来换取计算时间开销的小技巧。到底哪一种方法好？其实还是要看你用在什么地方。")]),s._v(" "),a("p",[s._v("定义：算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n)为语句关于 n 所占存储空间的函数。")]),s._v(" "),a("p",[s._v("通常，我们都是用“时间复杂度”来指运行时间的需求，是用“空间复杂度”指空间需求。")]),s._v(" "),a("p",[s._v("当直接要让我们求“复杂度”时，通常指的是时间复杂度。")]),s._v(" "),a("p",[s._v("显然对时间复杂度的追求更是属于算法的潮流！")]),s._v(" "),a("h3",{attrs:{id:"空间复杂度-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-o-1","aria-hidden":"true"}},[s._v("#")]),s._v(" 空间复杂度 O(1)")]),s._v(" "),a("p",[s._v("如果算法执行所需要的临时空间不随着某个变量 n 的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)\n举例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int i = 1;\nint j = 2;\n++i;\nj++;\nint m = i + j;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)")]),s._v(" "),a("h3",{attrs:{id:"空间复杂度-o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-o-n","aria-hidden":"true"}},[s._v("#")]),s._v(" 空间复杂度 O(n)")]),s._v(" "),a("p",[s._v("我们先看一个代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int[] m = new int[n]\nfor(i=1; i<=n; ++i)\n{\n   j = i;\n   j++;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这段代码中，第一行 new 了一个数组出来，这个数据占用的大小为 n，这段代码的 2-6 行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)")])])},[],!1,null,null,null);t.default=r.exports}}]);